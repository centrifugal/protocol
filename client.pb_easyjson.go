// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package protocol

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *writer
	_ easyjson.Marshaler
)

func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild(in *jlexer.Lexer, out *UnsubscribeResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild(out *writer, in UnsubscribeResult) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnsubscribeResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnsubscribeResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild1(in *jlexer.Lexer, out *UnsubscribeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild1(out *writer, in UnsubscribeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnsubscribeRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnsubscribeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild1(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild2(in *jlexer.Lexer, out *Unsubscribe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = uint32(in.Uint32())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild2(out *writer, in Unsubscribe) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Code))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unsubscribe) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unsubscribe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild2(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild3(in *jlexer.Lexer, out *SubscribeResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expires":
			out.Expires = bool(in.Bool())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "recoverable":
			out.Recoverable = bool(in.Bool())
		case "epoch":
			out.Epoch = string(in.String())
		case "publications":
			if in.IsNull() {
				in.Skip()
				out.Publications = nil
			} else {
				in.Delim('[')
				if out.Publications == nil {
					if !in.IsDelim(']') {
						out.Publications = make([]*Publication, 0, 8)
					} else {
						out.Publications = []*Publication{}
					}
				} else {
					out.Publications = (out.Publications)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Publication
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Publication)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Publications = append(out.Publications, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recovered":
			out.Recovered = bool(in.Bool())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "positioned":
			out.Positioned = bool(in.Bool())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "was_recovering":
			out.WasRecovering = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild3(out *writer, in SubscribeResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Expires {
		const prefix string = ",\"expires\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Expires))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ttl))
	}
	if in.Recoverable {
		const prefix string = ",\"recoverable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Recoverable))
	}
	if in.Epoch != "" {
		const prefix string = ",\"epoch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Epoch))
	}
	if len(in.Publications) != 0 {
		const prefix string = ",\"publications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Publications {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Recovered {
		const prefix string = ",\"recovered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Recovered))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Offset))
	}
	if in.Positioned {
		const prefix string = ",\"positioned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Positioned))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	if in.WasRecovering {
		const prefix string = ",\"was_recovering\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WasRecovering))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild3(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild4(in *jlexer.Lexer, out *SubscribeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "recover":
			out.Recover = bool(in.Bool())
		case "epoch":
			out.Epoch = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "positioned":
			out.Positioned = bool(in.Bool())
		case "recoverable":
			out.Recoverable = bool(in.Bool())
		case "join_leave":
			out.JoinLeave = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild4(out *writer, in SubscribeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Recover {
		const prefix string = ",\"recover\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Recover))
	}
	if in.Epoch != "" {
		const prefix string = ",\"epoch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Epoch))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Offset))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	if in.Positioned {
		const prefix string = ",\"positioned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Positioned))
	}
	if in.Recoverable {
		const prefix string = ",\"recoverable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Recoverable))
	}
	if in.JoinLeave {
		const prefix string = ",\"join_leave\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.JoinLeave))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscribeRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscribeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild4(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild5(in *jlexer.Lexer, out *Subscribe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recoverable":
			out.Recoverable = bool(in.Bool())
		case "epoch":
			out.Epoch = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "positioned":
			out.Positioned = bool(in.Bool())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild5(out *writer, in Subscribe) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Recoverable {
		const prefix string = ",\"recoverable\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Recoverable))
	}
	if in.Epoch != "" {
		const prefix string = ",\"epoch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Epoch))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Offset))
	}
	if in.Positioned {
		const prefix string = ",\"positioned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Positioned))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscribe) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscribe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild5(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild6(in *jlexer.Lexer, out *SubRefreshResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expires":
			out.Expires = bool(in.Bool())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild6(out *writer, in SubRefreshResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Expires {
		const prefix string = ",\"expires\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Expires))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ttl))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubRefreshResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubRefreshResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild6(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild7(in *jlexer.Lexer, out *SubRefreshRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild7(out *writer, in SubRefreshRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubRefreshRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubRefreshRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild7(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild8(in *jlexer.Lexer, out *StreamPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "epoch":
			out.Epoch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild8(out *writer, in StreamPosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Offset))
	}
	if in.Epoch != "" {
		const prefix string = ",\"epoch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Epoch))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamPosition) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild8(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild9(in *jlexer.Lexer, out *SendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild9(out *writer, in SendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild9(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild10(in *jlexer.Lexer, out *Reply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint32(in.Uint32())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		case "push":
			if in.IsNull() {
				in.Skip()
				out.Push = nil
			} else {
				if out.Push == nil {
					out.Push = new(Push)
				}
				(*out.Push).UnmarshalEasyJSON(in)
			}
		case "connect":
			if in.IsNull() {
				in.Skip()
				out.Connect = nil
			} else {
				if out.Connect == nil {
					out.Connect = new(ConnectResult)
				}
				(*out.Connect).UnmarshalEasyJSON(in)
			}
		case "subscribe":
			if in.IsNull() {
				in.Skip()
				out.Subscribe = nil
			} else {
				if out.Subscribe == nil {
					out.Subscribe = new(SubscribeResult)
				}
				(*out.Subscribe).UnmarshalEasyJSON(in)
			}
		case "unsubscribe":
			if in.IsNull() {
				in.Skip()
				out.Unsubscribe = nil
			} else {
				if out.Unsubscribe == nil {
					out.Unsubscribe = new(UnsubscribeResult)
				}
				(*out.Unsubscribe).UnmarshalEasyJSON(in)
			}
		case "publish":
			if in.IsNull() {
				in.Skip()
				out.Publish = nil
			} else {
				if out.Publish == nil {
					out.Publish = new(PublishResult)
				}
				(*out.Publish).UnmarshalEasyJSON(in)
			}
		case "presence":
			if in.IsNull() {
				in.Skip()
				out.Presence = nil
			} else {
				if out.Presence == nil {
					out.Presence = new(PresenceResult)
				}
				(*out.Presence).UnmarshalEasyJSON(in)
			}
		case "presence_stats":
			if in.IsNull() {
				in.Skip()
				out.PresenceStats = nil
			} else {
				if out.PresenceStats == nil {
					out.PresenceStats = new(PresenceStatsResult)
				}
				(*out.PresenceStats).UnmarshalEasyJSON(in)
			}
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				if out.History == nil {
					out.History = new(HistoryResult)
				}
				(*out.History).UnmarshalEasyJSON(in)
			}
		case "ping":
			if in.IsNull() {
				in.Skip()
				out.Ping = nil
			} else {
				if out.Ping == nil {
					out.Ping = new(PingResult)
				}
				(*out.Ping).UnmarshalEasyJSON(in)
			}
		case "rpc":
			if in.IsNull() {
				in.Skip()
				out.Rpc = nil
			} else {
				if out.Rpc == nil {
					out.Rpc = new(RPCResult)
				}
				(*out.Rpc).UnmarshalEasyJSON(in)
			}
		case "refresh":
			if in.IsNull() {
				in.Skip()
				out.Refresh = nil
			} else {
				if out.Refresh == nil {
					out.Refresh = new(RefreshResult)
				}
				(*out.Refresh).UnmarshalEasyJSON(in)
			}
		case "sub_refresh":
			if in.IsNull() {
				in.Skip()
				out.SubRefresh = nil
			} else {
				if out.SubRefresh == nil {
					out.SubRefresh = new(SubRefreshResult)
				}
				(*out.SubRefresh).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild10(out *writer, in Reply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Id))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Error).MarshalEasyJSON(out)
	}
	if in.Push != nil {
		const prefix string = ",\"push\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Push).MarshalEasyJSON(out)
	}
	if in.Connect != nil {
		const prefix string = ",\"connect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Connect).MarshalEasyJSON(out)
	}
	if in.Subscribe != nil {
		const prefix string = ",\"subscribe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Subscribe).MarshalEasyJSON(out)
	}
	if in.Unsubscribe != nil {
		const prefix string = ",\"unsubscribe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Unsubscribe).MarshalEasyJSON(out)
	}
	if in.Publish != nil {
		const prefix string = ",\"publish\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Publish).MarshalEasyJSON(out)
	}
	if in.Presence != nil {
		const prefix string = ",\"presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Presence).MarshalEasyJSON(out)
	}
	if in.PresenceStats != nil {
		const prefix string = ",\"presence_stats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PresenceStats).MarshalEasyJSON(out)
	}
	if in.History != nil {
		const prefix string = ",\"history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.History).MarshalEasyJSON(out)
	}
	if in.Ping != nil {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ping).MarshalEasyJSON(out)
	}
	if in.Rpc != nil {
		const prefix string = ",\"rpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Rpc).MarshalEasyJSON(out)
	}
	if in.Refresh != nil {
		const prefix string = ",\"refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Refresh).MarshalEasyJSON(out)
	}
	if in.SubRefresh != nil {
		const prefix string = ",\"sub_refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SubRefresh).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reply) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild10(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild11(in *jlexer.Lexer, out *RefreshResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client":
			out.Client = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "expires":
			out.Expires = bool(in.Bool())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild11(out *writer, in RefreshResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Client != "" {
		const prefix string = ",\"client\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Client))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Expires {
		const prefix string = ",\"expires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Expires))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ttl))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild11(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild12(in *jlexer.Lexer, out *RefreshRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild12(out *writer, in RefreshRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Token != "" {
		const prefix string = ",\"token\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefreshRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefreshRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild12(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild13(in *jlexer.Lexer, out *Refresh) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expires":
			out.Expires = bool(in.Bool())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild13(out *writer, in Refresh) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Expires {
		const prefix string = ",\"expires\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Expires))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ttl))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Refresh) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Refresh) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild13(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild14(in *jlexer.Lexer, out *RPCResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild14(out *writer, in RPCResult) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RPCResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RPCResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild14(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild15(in *jlexer.Lexer, out *RPCRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "method":
			out.Method = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild15(out *writer, in RPCRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Data).MarshalJSON())
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RPCRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RPCRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild15(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild16(in *jlexer.Lexer, out *Push) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "pub":
			if in.IsNull() {
				in.Skip()
				out.Pub = nil
			} else {
				if out.Pub == nil {
					out.Pub = new(Publication)
				}
				(*out.Pub).UnmarshalEasyJSON(in)
			}
		case "join":
			if in.IsNull() {
				in.Skip()
				out.Join = nil
			} else {
				if out.Join == nil {
					out.Join = new(Join)
				}
				(*out.Join).UnmarshalEasyJSON(in)
			}
		case "leave":
			if in.IsNull() {
				in.Skip()
				out.Leave = nil
			} else {
				if out.Leave == nil {
					out.Leave = new(Leave)
				}
				(*out.Leave).UnmarshalEasyJSON(in)
			}
		case "unsubscribe":
			if in.IsNull() {
				in.Skip()
				out.Unsubscribe = nil
			} else {
				if out.Unsubscribe == nil {
					out.Unsubscribe = new(Unsubscribe)
				}
				(*out.Unsubscribe).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "subscribe":
			if in.IsNull() {
				in.Skip()
				out.Subscribe = nil
			} else {
				if out.Subscribe == nil {
					out.Subscribe = new(Subscribe)
				}
				(*out.Subscribe).UnmarshalEasyJSON(in)
			}
		case "connect":
			if in.IsNull() {
				in.Skip()
				out.Connect = nil
			} else {
				if out.Connect == nil {
					out.Connect = new(Connect)
				}
				(*out.Connect).UnmarshalEasyJSON(in)
			}
		case "disconnect":
			if in.IsNull() {
				in.Skip()
				out.Disconnect = nil
			} else {
				if out.Disconnect == nil {
					out.Disconnect = new(Disconnect)
				}
				(*out.Disconnect).UnmarshalEasyJSON(in)
			}
		case "refresh":
			if in.IsNull() {
				in.Skip()
				out.Refresh = nil
			} else {
				if out.Refresh == nil {
					out.Refresh = new(Refresh)
				}
				(*out.Refresh).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild16(out *writer, in Push) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	if in.Pub != nil {
		const prefix string = ",\"pub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Pub).MarshalEasyJSON(out)
	}
	if in.Join != nil {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Join).MarshalEasyJSON(out)
	}
	if in.Leave != nil {
		const prefix string = ",\"leave\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Leave).MarshalEasyJSON(out)
	}
	if in.Unsubscribe != nil {
		const prefix string = ",\"unsubscribe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Unsubscribe).MarshalEasyJSON(out)
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Message).MarshalEasyJSON(out)
	}
	if in.Subscribe != nil {
		const prefix string = ",\"subscribe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Subscribe).MarshalEasyJSON(out)
	}
	if in.Connect != nil {
		const prefix string = ",\"connect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Connect).MarshalEasyJSON(out)
	}
	if in.Disconnect != nil {
		const prefix string = ",\"disconnect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Disconnect).MarshalEasyJSON(out)
	}
	if in.Refresh != nil {
		const prefix string = ",\"refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Refresh).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Push) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Push) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild16(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild17(in *jlexer.Lexer, out *PublishResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild17(out *writer, in PublishResult) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublishResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublishResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild17(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild18(in *jlexer.Lexer, out *PublishRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild18(out *writer, in PublishRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublishRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublishRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild18(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild19(in *jlexer.Lexer, out *Publication) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "info":
			if in.IsNull() {
				in.Skip()
				out.Info = nil
			} else {
				if out.Info == nil {
					out.Info = new(ClientInfo)
				}
				(*out.Info).UnmarshalEasyJSON(in)
			}
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Tags)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild19(out *writer, in Publication) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Data).MarshalJSON())
	}
	if in.Info != nil {
		const prefix string = ",\"info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Info).MarshalEasyJSON(out)
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Offset))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Tags {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Publication) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Publication) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild19(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild20(in *jlexer.Lexer, out *PresenceStatsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "num_clients":
			out.NumClients = uint32(in.Uint32())
		case "num_users":
			out.NumUsers = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild20(out *writer, in PresenceStatsResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"num_clients\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.NumClients))
	}
	{
		const prefix string = ",\"num_users\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.NumUsers))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresenceStatsResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresenceStatsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild20(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild21(in *jlexer.Lexer, out *PresenceStatsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild21(out *writer, in PresenceStatsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresenceStatsRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresenceStatsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild21(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild22(in *jlexer.Lexer, out *PresenceResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "presence":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Presence = make(map[string]*ClientInfo)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 *ClientInfo
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(ClientInfo)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					(out.Presence)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild22(out *writer, in PresenceResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"presence\":"
		out.RawString(prefix[1:])
		if in.Presence == nil && (out.Flags&nilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Presence {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil {
					out.RawString("null")
				} else {
					(*v7Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresenceResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild22(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresenceResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild22(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild23(in *jlexer.Lexer, out *PresenceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild23(out *writer, in PresenceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresenceRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresenceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild23(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild24(in *jlexer.Lexer, out *PingResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild24(out *writer, in PingResult) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PingResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild24(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PingResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild24(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild25(in *jlexer.Lexer, out *PingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild25(out *writer, in PingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PingRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild25(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild25(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild26(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild26(out *writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild26(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild26(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild27(in *jlexer.Lexer, out *Leave) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "info":
			if in.IsNull() {
				in.Skip()
				out.Info = nil
			} else {
				if out.Info == nil {
					out.Info = new(ClientInfo)
				}
				(*out.Info).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild27(out *writer, in Leave) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Info != nil {
		const prefix string = ",\"info\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Info).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Leave) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild27(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Leave) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild27(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild28(in *jlexer.Lexer, out *Join) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "info":
			if in.IsNull() {
				in.Skip()
				out.Info = nil
			} else {
				if out.Info == nil {
					out.Info = new(ClientInfo)
				}
				(*out.Info).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild28(out *writer, in Join) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Info != nil {
		const prefix string = ",\"info\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Info).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Join) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild28(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Join) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild28(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild29(in *jlexer.Lexer, out *HistoryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "publications":
			if in.IsNull() {
				in.Skip()
				out.Publications = nil
			} else {
				in.Delim('[')
				if out.Publications == nil {
					if !in.IsDelim(']') {
						out.Publications = make([]*Publication, 0, 8)
					} else {
						out.Publications = []*Publication{}
					}
				} else {
					out.Publications = (out.Publications)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Publication
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Publication)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Publications = append(out.Publications, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "epoch":
			out.Epoch = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild29(out *writer, in HistoryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"publications\":"
		out.RawString(prefix[1:])
		if in.Publications == nil && (out.Flags&nilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Publications {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"epoch\":"
		out.RawString(prefix)
		out.String(string(in.Epoch))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Offset))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoryResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild29(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild29(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild30(in *jlexer.Lexer, out *HistoryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "limit":
			out.Limit = int32(in.Int32())
		case "since":
			if in.IsNull() {
				in.Skip()
				out.Since = nil
			} else {
				if out.Since == nil {
					out.Since = new(StreamPosition)
				}
				(*out.Since).UnmarshalEasyJSON(in)
			}
		case "reverse":
			out.Reverse = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild30(out *writer, in HistoryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Limit))
	}
	if in.Since != nil {
		const prefix string = ",\"since\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Since).MarshalEasyJSON(out)
	}
	if in.Reverse {
		const prefix string = ",\"reverse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Reverse))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoryRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild30(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild30(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild31(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = uint32(in.Uint32())
		case "message":
			out.Message = string(in.String())
		case "temporary":
			out.Temporary = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild31(out *writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Code))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Temporary {
		const prefix string = ",\"temporary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Temporary))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild31(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild31(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild32(in *jlexer.Lexer, out *EmulationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			out.Node = string(in.String())
		case "session":
			out.Session = string(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild32(out *writer, in EmulationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Node != "" {
		const prefix string = ",\"node\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Node))
	}
	if in.Session != "" {
		const prefix string = ",\"session\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Session))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmulationRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild32(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmulationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild32(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild33(in *jlexer.Lexer, out *Disconnect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = uint32(in.Uint32())
		case "reason":
			out.Reason = string(in.String())
		case "reconnect":
			out.Reconnect = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild33(out *writer, in Disconnect) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Code))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	if in.Reconnect {
		const prefix string = ",\"reconnect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Reconnect))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Disconnect) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild33(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Disconnect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild33(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild34(in *jlexer.Lexer, out *ConnectResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client":
			out.Client = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "expires":
			out.Expires = bool(in.Bool())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "subs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subs = make(map[string]*SubscribeResult)
				} else {
					out.Subs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 *SubscribeResult
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(SubscribeResult)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					(out.Subs)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ping":
			out.Ping = uint32(in.Uint32())
		case "pong":
			out.Pong = bool(in.Bool())
		case "session":
			out.Session = string(in.String())
		case "node":
			out.Node = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild34(out *writer, in ConnectResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Client != "" {
		const prefix string = ",\"client\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Client))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Expires {
		const prefix string = ",\"expires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Expires))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ttl))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	if len(in.Subs) != 0 {
		const prefix string = ",\"subs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Subs {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if v12Value == nil {
					out.RawString("null")
				} else {
					(*v12Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if in.Ping != 0 {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ping))
	}
	if in.Pong {
		const prefix string = ",\"pong\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Pong))
	}
	if in.Session != "" {
		const prefix string = ",\"session\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Session))
	}
	if in.Node != "" {
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Node))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectResult) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild34(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild34(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild35(in *jlexer.Lexer, out *ConnectRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "subs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subs = make(map[string]*SubscribeRequest)
				} else {
					out.Subs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 *SubscribeRequest
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(SubscribeRequest)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					(out.Subs)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild35(out *writer, in ConnectRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Token != "" {
		const prefix string = ",\"token\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	if len(in.Subs) != 0 {
		const prefix string = ",\"subs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Subs {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil {
					out.RawString("null")
				} else {
					(*v14Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectRequest) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild35(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild35(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild36(in *jlexer.Lexer, out *Connect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client":
			out.Client = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "subs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Subs = make(map[string]*SubscribeResult)
				} else {
					out.Subs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 *SubscribeResult
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(SubscribeResult)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					(out.Subs)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "expires":
			out.Expires = bool(in.Bool())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "ping":
			out.Ping = uint32(in.Uint32())
		case "pong":
			out.Pong = bool(in.Bool())
		case "session":
			out.Session = string(in.String())
		case "node":
			out.Node = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild36(out *writer, in Connect) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Client != "" {
		const prefix string = ",\"client\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Client))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	if len(in.Subs) != 0 {
		const prefix string = ",\"subs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Subs {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil {
					out.RawString("null")
				} else {
					(*v16Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if in.Expires {
		const prefix string = ",\"expires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Expires))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ttl))
	}
	if in.Ping != 0 {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Ping))
	}
	if in.Pong {
		const prefix string = ",\"pong\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Pong))
	}
	if in.Session != "" {
		const prefix string = ",\"session\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Session))
	}
	if in.Node != "" {
		const prefix string = ",\"node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Node))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Connect) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild36(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Connect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild36(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild37(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint32(in.Uint32())
		case "connect":
			if in.IsNull() {
				in.Skip()
				out.Connect = nil
			} else {
				if out.Connect == nil {
					out.Connect = new(ConnectRequest)
				}
				(*out.Connect).UnmarshalEasyJSON(in)
			}
		case "subscribe":
			if in.IsNull() {
				in.Skip()
				out.Subscribe = nil
			} else {
				if out.Subscribe == nil {
					out.Subscribe = new(SubscribeRequest)
				}
				(*out.Subscribe).UnmarshalEasyJSON(in)
			}
		case "unsubscribe":
			if in.IsNull() {
				in.Skip()
				out.Unsubscribe = nil
			} else {
				if out.Unsubscribe == nil {
					out.Unsubscribe = new(UnsubscribeRequest)
				}
				(*out.Unsubscribe).UnmarshalEasyJSON(in)
			}
		case "publish":
			if in.IsNull() {
				in.Skip()
				out.Publish = nil
			} else {
				if out.Publish == nil {
					out.Publish = new(PublishRequest)
				}
				(*out.Publish).UnmarshalEasyJSON(in)
			}
		case "presence":
			if in.IsNull() {
				in.Skip()
				out.Presence = nil
			} else {
				if out.Presence == nil {
					out.Presence = new(PresenceRequest)
				}
				(*out.Presence).UnmarshalEasyJSON(in)
			}
		case "presence_stats":
			if in.IsNull() {
				in.Skip()
				out.PresenceStats = nil
			} else {
				if out.PresenceStats == nil {
					out.PresenceStats = new(PresenceStatsRequest)
				}
				(*out.PresenceStats).UnmarshalEasyJSON(in)
			}
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				if out.History == nil {
					out.History = new(HistoryRequest)
				}
				(*out.History).UnmarshalEasyJSON(in)
			}
		case "ping":
			if in.IsNull() {
				in.Skip()
				out.Ping = nil
			} else {
				if out.Ping == nil {
					out.Ping = new(PingRequest)
				}
				(*out.Ping).UnmarshalEasyJSON(in)
			}
		case "send":
			if in.IsNull() {
				in.Skip()
				out.Send = nil
			} else {
				if out.Send == nil {
					out.Send = new(SendRequest)
				}
				(*out.Send).UnmarshalEasyJSON(in)
			}
		case "rpc":
			if in.IsNull() {
				in.Skip()
				out.Rpc = nil
			} else {
				if out.Rpc == nil {
					out.Rpc = new(RPCRequest)
				}
				(*out.Rpc).UnmarshalEasyJSON(in)
			}
		case "refresh":
			if in.IsNull() {
				in.Skip()
				out.Refresh = nil
			} else {
				if out.Refresh == nil {
					out.Refresh = new(RefreshRequest)
				}
				(*out.Refresh).UnmarshalEasyJSON(in)
			}
		case "sub_refresh":
			if in.IsNull() {
				in.Skip()
				out.SubRefresh = nil
			} else {
				if out.SubRefresh == nil {
					out.SubRefresh = new(SubRefreshRequest)
				}
				(*out.SubRefresh).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild37(out *writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Id))
	}
	if in.Connect != nil {
		const prefix string = ",\"connect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Connect).MarshalEasyJSON(out)
	}
	if in.Subscribe != nil {
		const prefix string = ",\"subscribe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Subscribe).MarshalEasyJSON(out)
	}
	if in.Unsubscribe != nil {
		const prefix string = ",\"unsubscribe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Unsubscribe).MarshalEasyJSON(out)
	}
	if in.Publish != nil {
		const prefix string = ",\"publish\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Publish).MarshalEasyJSON(out)
	}
	if in.Presence != nil {
		const prefix string = ",\"presence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Presence).MarshalEasyJSON(out)
	}
	if in.PresenceStats != nil {
		const prefix string = ",\"presence_stats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PresenceStats).MarshalEasyJSON(out)
	}
	if in.History != nil {
		const prefix string = ",\"history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.History).MarshalEasyJSON(out)
	}
	if in.Ping != nil {
		const prefix string = ",\"ping\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ping).MarshalEasyJSON(out)
	}
	if in.Send != nil {
		const prefix string = ",\"send\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Send).MarshalEasyJSON(out)
	}
	if in.Rpc != nil {
		const prefix string = ",\"rpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Rpc).MarshalEasyJSON(out)
	}
	if in.Refresh != nil {
		const prefix string = ",\"refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Refresh).MarshalEasyJSON(out)
	}
	if in.SubRefresh != nil {
		const prefix string = ",\"sub_refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SubRefresh).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild37(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild37(l, v)
}
func easyjson19c08265DecodeGithubComCentrifugalProtocolBuild38(in *jlexer.Lexer, out *ClientInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "client":
			out.Client = string(in.String())
		case "conn_info":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConnInfo).UnmarshalJSON(data))
			}
		case "chan_info":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChanInfo).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGithubComCentrifugalProtocolBuild38(out *writer, in ClientInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"client\":"
		out.RawString(prefix)
		out.String(string(in.Client))
	}
	if len(in.ConnInfo) != 0 {
		const prefix string = ",\"conn_info\":"
		out.RawString(prefix)
		out.Raw((in.ConnInfo).MarshalJSON())
	}
	if len(in.ChanInfo) != 0 {
		const prefix string = ",\"chan_info\":"
		out.RawString(prefix)
		out.Raw((in.ChanInfo).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientInfo) MarshalEasyJSON(w *writer) {
	easyjson19c08265EncodeGithubComCentrifugalProtocolBuild38(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGithubComCentrifugalProtocolBuild38(l, v)
}
