// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: client.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Temporary     bool                   `protobuf:"varint,3,opt,name=temporary,proto3" json:"temporary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

type EmulationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Session       string                 `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	Data          Raw                    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmulationRequest) Reset() {
	*x = EmulationRequest{}
	mi := &file_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmulationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmulationRequest) ProtoMessage() {}

func (x *EmulationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmulationRequest.ProtoReflect.Descriptor instead.
func (*EmulationRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{1}
}

func (x *EmulationRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *EmulationRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EmulationRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Command sent from a client to a server.
// ProtocolVersion2 uses id and one of the possible request messages.
type Command struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of command to let client match replies to commands.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// ProtocolVersion2 client can send one of the following requests. Server will
	// only take the first non-null request out of these and may return an error if
	// client passed more than one request. We are not using oneof here due to JSON
	// interoperability concerns.
	Connect       *ConnectRequest       `protobuf:"bytes,4,opt,name=connect,proto3" json:"connect,omitempty"`
	Subscribe     *SubscribeRequest     `protobuf:"bytes,5,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	Unsubscribe   *UnsubscribeRequest   `protobuf:"bytes,6,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	Publish       *PublishRequest       `protobuf:"bytes,7,opt,name=publish,proto3" json:"publish,omitempty"`
	Presence      *PresenceRequest      `protobuf:"bytes,8,opt,name=presence,proto3" json:"presence,omitempty"`
	PresenceStats *PresenceStatsRequest `protobuf:"bytes,9,opt,name=presence_stats,json=presenceStats,proto3" json:"presence_stats,omitempty"`
	History       *HistoryRequest       `protobuf:"bytes,10,opt,name=history,proto3" json:"history,omitempty"`
	Ping          *PingRequest          `protobuf:"bytes,11,opt,name=ping,proto3" json:"ping,omitempty"`
	Send          *SendRequest          `protobuf:"bytes,12,opt,name=send,proto3" json:"send,omitempty"`
	Rpc           *RPCRequest           `protobuf:"bytes,13,opt,name=rpc,proto3" json:"rpc,omitempty"`
	Refresh       *RefreshRequest       `protobuf:"bytes,14,opt,name=refresh,proto3" json:"refresh,omitempty"`
	SubRefresh    *SubRefreshRequest    `protobuf:"bytes,15,opt,name=sub_refresh,json=subRefresh,proto3" json:"sub_refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Command) GetConnect() *ConnectRequest {
	if x != nil {
		return x.Connect
	}
	return nil
}

func (x *Command) GetSubscribe() *SubscribeRequest {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *Command) GetUnsubscribe() *UnsubscribeRequest {
	if x != nil {
		return x.Unsubscribe
	}
	return nil
}

func (x *Command) GetPublish() *PublishRequest {
	if x != nil {
		return x.Publish
	}
	return nil
}

func (x *Command) GetPresence() *PresenceRequest {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Command) GetPresenceStats() *PresenceStatsRequest {
	if x != nil {
		return x.PresenceStats
	}
	return nil
}

func (x *Command) GetHistory() *HistoryRequest {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *Command) GetPing() *PingRequest {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *Command) GetSend() *SendRequest {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *Command) GetRpc() *RPCRequest {
	if x != nil {
		return x.Rpc
	}
	return nil
}

func (x *Command) GetRefresh() *RefreshRequest {
	if x != nil {
		return x.Refresh
	}
	return nil
}

func (x *Command) GetSubRefresh() *SubRefreshRequest {
	if x != nil {
		return x.SubRefresh
	}
	return nil
}

// Reply sent from a server to a client.
// ProtocolVersion2 uses id and one of the possible concrete result messages.
type Reply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id will only be set to a value > 0 for replies to commands. For pushes
	// it will have zero value.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Error can only be set in replies to commands. For pushes it will have zero value.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// ProtocolVersion2 server can send one of the following fields. We are not using
	// oneof here due to JSON interoperability concerns.
	Push          *Push                `protobuf:"bytes,4,opt,name=push,proto3" json:"push,omitempty"`
	Connect       *ConnectResult       `protobuf:"bytes,5,opt,name=connect,proto3" json:"connect,omitempty"`
	Subscribe     *SubscribeResult     `protobuf:"bytes,6,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	Unsubscribe   *UnsubscribeResult   `protobuf:"bytes,7,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	Publish       *PublishResult       `protobuf:"bytes,8,opt,name=publish,proto3" json:"publish,omitempty"`
	Presence      *PresenceResult      `protobuf:"bytes,9,opt,name=presence,proto3" json:"presence,omitempty"`
	PresenceStats *PresenceStatsResult `protobuf:"bytes,10,opt,name=presence_stats,json=presenceStats,proto3" json:"presence_stats,omitempty"`
	History       *HistoryResult       `protobuf:"bytes,11,opt,name=history,proto3" json:"history,omitempty"`
	Ping          *PingResult          `protobuf:"bytes,12,opt,name=ping,proto3" json:"ping,omitempty"`
	Rpc           *RPCResult           `protobuf:"bytes,13,opt,name=rpc,proto3" json:"rpc,omitempty"`
	Refresh       *RefreshResult       `protobuf:"bytes,14,opt,name=refresh,proto3" json:"refresh,omitempty"`
	SubRefresh    *SubRefreshResult    `protobuf:"bytes,15,opt,name=sub_refresh,json=subRefresh,proto3" json:"sub_refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3}
}

func (x *Reply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Reply) GetPush() *Push {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *Reply) GetConnect() *ConnectResult {
	if x != nil {
		return x.Connect
	}
	return nil
}

func (x *Reply) GetSubscribe() *SubscribeResult {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *Reply) GetUnsubscribe() *UnsubscribeResult {
	if x != nil {
		return x.Unsubscribe
	}
	return nil
}

func (x *Reply) GetPublish() *PublishResult {
	if x != nil {
		return x.Publish
	}
	return nil
}

func (x *Reply) GetPresence() *PresenceResult {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Reply) GetPresenceStats() *PresenceStatsResult {
	if x != nil {
		return x.PresenceStats
	}
	return nil
}

func (x *Reply) GetHistory() *HistoryResult {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *Reply) GetPing() *PingResult {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *Reply) GetRpc() *RPCResult {
	if x != nil {
		return x.Rpc
	}
	return nil
}

func (x *Reply) GetRefresh() *RefreshResult {
	if x != nil {
		return x.Refresh
	}
	return nil
}

func (x *Reply) GetSubRefresh() *SubRefreshResult {
	if x != nil {
		return x.SubRefresh
	}
	return nil
}

// Push can be sent to a client as part of Reply in case of bidirectional transport or
// without additional wrapping in case of unidirectional transports.
// ProtocolVersion2 uses channel and one of the possible concrete push messages.
type Push struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Channel string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// ProtocolVersion2 server can push one of the following fields to the client. We are
	// not using oneof here due to JSON interoperability concerns.
	Pub           *Publication `protobuf:"bytes,4,opt,name=pub,proto3" json:"pub,omitempty"`
	Join          *Join        `protobuf:"bytes,5,opt,name=join,proto3" json:"join,omitempty"`
	Leave         *Leave       `protobuf:"bytes,6,opt,name=leave,proto3" json:"leave,omitempty"`
	Unsubscribe   *Unsubscribe `protobuf:"bytes,7,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	Message       *Message     `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Subscribe     *Subscribe   `protobuf:"bytes,9,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	Connect       *Connect     `protobuf:"bytes,10,opt,name=connect,proto3" json:"connect,omitempty"`
	Disconnect    *Disconnect  `protobuf:"bytes,11,opt,name=disconnect,proto3" json:"disconnect,omitempty"`
	Refresh       *Refresh     `protobuf:"bytes,12,opt,name=refresh,proto3" json:"refresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Push) Reset() {
	*x = Push{}
	mi := &file_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Push) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Push) ProtoMessage() {}

func (x *Push) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Push.ProtoReflect.Descriptor instead.
func (*Push) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{4}
}

func (x *Push) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Push) GetPub() *Publication {
	if x != nil {
		return x.Pub
	}
	return nil
}

func (x *Push) GetJoin() *Join {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *Push) GetLeave() *Leave {
	if x != nil {
		return x.Leave
	}
	return nil
}

func (x *Push) GetUnsubscribe() *Unsubscribe {
	if x != nil {
		return x.Unsubscribe
	}
	return nil
}

func (x *Push) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Push) GetSubscribe() *Subscribe {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *Push) GetConnect() *Connect {
	if x != nil {
		return x.Connect
	}
	return nil
}

func (x *Push) GetDisconnect() *Disconnect {
	if x != nil {
		return x.Disconnect
	}
	return nil
}

func (x *Push) GetRefresh() *Refresh {
	if x != nil {
		return x.Refresh
	}
	return nil
}

type ClientInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
	Client        string                 `protobuf:"bytes,2,opt,name=client,proto3" json:"client"`
	ConnInfo      Raw                    `protobuf:"bytes,3,opt,name=conn_info,json=connInfo,proto3" json:"conn_info,omitempty"`
	ChanInfo      Raw                    `protobuf:"bytes,4,opt,name=chan_info,json=chanInfo,proto3" json:"chan_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	mi := &file_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{5}
}

func (x *ClientInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClientInfo) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *ClientInfo) GetConnInfo() []byte {
	if x != nil {
		return x.ConnInfo
	}
	return nil
}

func (x *ClientInfo) GetChanInfo() []byte {
	if x != nil {
		return x.ChanInfo
	}
	return nil
}

type Publication struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          Raw                    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Meta          Raw                    `protobuf:"bytes,11,opt,name=meta,proto3" json:"meta,omitempty"`
	Info          *ClientInfo            `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Offset        uint64                 `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Delta         bool                   `protobuf:"varint,8,opt,name=delta,proto3" json:"delta,omitempty"`     // When set indicates that data in Publication is a delta from previous data.
	Time          int64                  `protobuf:"varint,9,opt,name=time,proto3" json:"time,omitempty"`       // Optional time of publication as Unix timestamp milliseconds.
	Channel       string                 `protobuf:"bytes,10,opt,name=channel,proto3" json:"channel,omitempty"` // Optional channel name if Publication relates to wildcard subscription.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Publication) Reset() {
	*x = Publication{}
	mi := &file_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{6}
}

func (x *Publication) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Publication) GetMeta() []byte {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Publication) GetInfo() *ClientInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Publication) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Publication) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Publication) GetDelta() bool {
	if x != nil {
		return x.Delta
	}
	return false
}

func (x *Publication) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Publication) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type Join struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *ClientInfo            `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Join) Reset() {
	*x = Join{}
	mi := &file_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{7}
}

func (x *Join) GetInfo() *ClientInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Leave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *ClientInfo            `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Leave) Reset() {
	*x = Leave{}
	mi := &file_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Leave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leave) ProtoMessage() {}

func (x *Leave) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leave.ProtoReflect.Descriptor instead.
func (*Leave) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{8}
}

func (x *Leave) GetInfo() *ClientInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Unsubscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Unsubscribe) Reset() {
	*x = Unsubscribe{}
	mi := &file_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsubscribe) ProtoMessage() {}

func (x *Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsubscribe.ProtoReflect.Descriptor instead.
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{9}
}

func (x *Unsubscribe) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Unsubscribe) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Subscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recoverable   bool                   `protobuf:"varint,1,opt,name=recoverable,proto3" json:"recoverable,omitempty"`
	Epoch         string                 `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Offset        uint64                 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Positioned    bool                   `protobuf:"varint,6,opt,name=positioned,proto3" json:"positioned,omitempty"`
	Data          Raw                    `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	mi := &file_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{10}
}

func (x *Subscribe) GetRecoverable() bool {
	if x != nil {
		return x.Recoverable
	}
	return false
}

func (x *Subscribe) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *Subscribe) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Subscribe) GetPositioned() bool {
	if x != nil {
		return x.Positioned
	}
	return false
}

func (x *Subscribe) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          Raw                    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{11}
}

func (x *Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Connect struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Client        string                      `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Version       string                      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Data          Raw                         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Subs          map[string]*SubscribeResult `protobuf:"bytes,4,rep,name=subs,proto3" json:"subs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Expires       bool                        `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	Ttl           uint32                      `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Ping          uint32                      `protobuf:"varint,7,opt,name=ping,proto3" json:"ping,omitempty"`
	Pong          bool                        `protobuf:"varint,8,opt,name=pong,proto3" json:"pong,omitempty"`
	Session       string                      `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	Node          string                      `protobuf:"bytes,10,opt,name=node,proto3" json:"node,omitempty"`
	Time          int64                       `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"` // Server time as Unix timestamp in milliseconds (not sent by default).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connect) Reset() {
	*x = Connect{}
	mi := &file_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connect) ProtoMessage() {}

func (x *Connect) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connect.ProtoReflect.Descriptor instead.
func (*Connect) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{12}
}

func (x *Connect) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *Connect) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Connect) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Connect) GetSubs() map[string]*SubscribeResult {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *Connect) GetExpires() bool {
	if x != nil {
		return x.Expires
	}
	return false
}

func (x *Connect) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Connect) GetPing() uint32 {
	if x != nil {
		return x.Ping
	}
	return 0
}

func (x *Connect) GetPong() bool {
	if x != nil {
		return x.Pong
	}
	return false
}

func (x *Connect) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *Connect) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Connect) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Disconnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Reconnect     bool                   `protobuf:"varint,3,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disconnect) Reset() {
	*x = Disconnect{}
	mi := &file_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnect) ProtoMessage() {}

func (x *Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnect.ProtoReflect.Descriptor instead.
func (*Disconnect) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{13}
}

func (x *Disconnect) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Disconnect) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Disconnect) GetReconnect() bool {
	if x != nil {
		return x.Reconnect
	}
	return false
}

type Refresh struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expires       bool                   `protobuf:"varint,1,opt,name=expires,proto3" json:"expires,omitempty"`
	Ttl           uint32                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Refresh) Reset() {
	*x = Refresh{}
	mi := &file_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Refresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refresh) ProtoMessage() {}

func (x *Refresh) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refresh.ProtoReflect.Descriptor instead.
func (*Refresh) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{14}
}

func (x *Refresh) GetExpires() bool {
	if x != nil {
		return x.Expires
	}
	return false
}

func (x *Refresh) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type ConnectRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Token         string                       `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Data          Raw                          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Subs          map[string]*SubscribeRequest `protobuf:"bytes,3,rep,name=subs,proto3" json:"subs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name          string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                       `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Headers       map[string]string            `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConnectRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConnectRequest) GetSubs() map[string]*SubscribeRequest {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *ConnectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConnectRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ConnectResult struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Client        string                      `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Version       string                      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Expires       bool                        `protobuf:"varint,3,opt,name=expires,proto3" json:"expires,omitempty"`
	Ttl           uint32                      `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Data          Raw                         `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Subs          map[string]*SubscribeResult `protobuf:"bytes,6,rep,name=subs,proto3" json:"subs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ping          uint32                      `protobuf:"varint,7,opt,name=ping,proto3" json:"ping,omitempty"`
	Pong          bool                        `protobuf:"varint,8,opt,name=pong,proto3" json:"pong,omitempty"`
	Session       string                      `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	Node          string                      `protobuf:"bytes,10,opt,name=node,proto3" json:"node,omitempty"`
	Time          int64                       `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"` // Server time as Unix timestamp in milliseconds (not sent by default).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResult) Reset() {
	*x = ConnectResult{}
	mi := &file_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResult) ProtoMessage() {}

func (x *ConnectResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResult.ProtoReflect.Descriptor instead.
func (*ConnectResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{16}
}

func (x *ConnectResult) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *ConnectResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConnectResult) GetExpires() bool {
	if x != nil {
		return x.Expires
	}
	return false
}

func (x *ConnectResult) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *ConnectResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConnectResult) GetSubs() map[string]*SubscribeResult {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *ConnectResult) GetPing() uint32 {
	if x != nil {
		return x.Ping
	}
	return 0
}

func (x *ConnectResult) GetPong() bool {
	if x != nil {
		return x.Pong
	}
	return false
}

func (x *ConnectResult) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *ConnectResult) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ConnectResult) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RefreshRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	mi := &file_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{17}
}

func (x *RefreshRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RefreshResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Client        string                 `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Expires       bool                   `protobuf:"varint,3,opt,name=expires,proto3" json:"expires,omitempty"`
	Ttl           uint32                 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshResult) Reset() {
	*x = RefreshResult{}
	mi := &file_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResult) ProtoMessage() {}

func (x *RefreshResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResult.ProtoReflect.Descriptor instead.
func (*RefreshResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{18}
}

func (x *RefreshResult) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *RefreshResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RefreshResult) GetExpires() bool {
	if x != nil {
		return x.Expires
	}
	return false
}

func (x *RefreshResult) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Recover       bool                   `protobuf:"varint,3,opt,name=recover,proto3" json:"recover,omitempty"`
	Epoch         string                 `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Offset        uint64                 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          Raw                    `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Positioned    bool                   `protobuf:"varint,9,opt,name=positioned,proto3" json:"positioned,omitempty"`
	Recoverable   bool                   `protobuf:"varint,10,opt,name=recoverable,proto3" json:"recoverable,omitempty"`
	JoinLeave     bool                   `protobuf:"varint,11,opt,name=join_leave,json=joinLeave,proto3" json:"join_leave,omitempty"`
	Delta         string                 `protobuf:"bytes,12,opt,name=delta,proto3" json:"delta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SubscribeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SubscribeRequest) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

func (x *SubscribeRequest) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *SubscribeRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SubscribeRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubscribeRequest) GetPositioned() bool {
	if x != nil {
		return x.Positioned
	}
	return false
}

func (x *SubscribeRequest) GetRecoverable() bool {
	if x != nil {
		return x.Recoverable
	}
	return false
}

func (x *SubscribeRequest) GetJoinLeave() bool {
	if x != nil {
		return x.JoinLeave
	}
	return false
}

func (x *SubscribeRequest) GetDelta() string {
	if x != nil {
		return x.Delta
	}
	return ""
}

type SubscribeResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expires       bool                   `protobuf:"varint,1,opt,name=expires,proto3" json:"expires,omitempty"`
	Ttl           uint32                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Recoverable   bool                   `protobuf:"varint,3,opt,name=recoverable,proto3" json:"recoverable,omitempty"`
	Epoch         string                 `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Publications  []*Publication         `protobuf:"bytes,7,rep,name=publications,proto3" json:"publications,omitempty"`
	Recovered     bool                   `protobuf:"varint,8,opt,name=recovered,proto3" json:"recovered,omitempty"`
	Offset        uint64                 `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Positioned    bool                   `protobuf:"varint,10,opt,name=positioned,proto3" json:"positioned,omitempty"`
	Data          Raw                    `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	WasRecovering bool                   `protobuf:"varint,12,opt,name=was_recovering,json=wasRecovering,proto3" json:"was_recovering,omitempty"`
	Delta         bool                   `protobuf:"varint,13,opt,name=delta,proto3" json:"delta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeResult) Reset() {
	*x = SubscribeResult{}
	mi := &file_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResult) ProtoMessage() {}

func (x *SubscribeResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResult.ProtoReflect.Descriptor instead.
func (*SubscribeResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{20}
}

func (x *SubscribeResult) GetExpires() bool {
	if x != nil {
		return x.Expires
	}
	return false
}

func (x *SubscribeResult) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SubscribeResult) GetRecoverable() bool {
	if x != nil {
		return x.Recoverable
	}
	return false
}

func (x *SubscribeResult) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *SubscribeResult) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *SubscribeResult) GetRecovered() bool {
	if x != nil {
		return x.Recovered
	}
	return false
}

func (x *SubscribeResult) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SubscribeResult) GetPositioned() bool {
	if x != nil {
		return x.Positioned
	}
	return false
}

func (x *SubscribeResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubscribeResult) GetWasRecovering() bool {
	if x != nil {
		return x.WasRecovering
	}
	return false
}

func (x *SubscribeResult) GetDelta() bool {
	if x != nil {
		return x.Delta
	}
	return false
}

type SubRefreshRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubRefreshRequest) Reset() {
	*x = SubRefreshRequest{}
	mi := &file_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRefreshRequest) ProtoMessage() {}

func (x *SubRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRefreshRequest.ProtoReflect.Descriptor instead.
func (*SubRefreshRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{21}
}

func (x *SubRefreshRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SubRefreshRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SubRefreshResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expires       bool                   `protobuf:"varint,1,opt,name=expires,proto3" json:"expires,omitempty"`
	Ttl           uint32                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubRefreshResult) Reset() {
	*x = SubRefreshResult{}
	mi := &file_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubRefreshResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRefreshResult) ProtoMessage() {}

func (x *SubRefreshResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRefreshResult.ProtoReflect.Descriptor instead.
func (*SubRefreshResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{22}
}

func (x *SubRefreshResult) GetExpires() bool {
	if x != nil {
		return x.Expires
	}
	return false
}

func (x *SubRefreshResult) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type UnsubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	mi := &file_client_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{23}
}

func (x *UnsubscribeRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type UnsubscribeResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeResult) Reset() {
	*x = UnsubscribeResult{}
	mi := &file_client_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeResult) ProtoMessage() {}

func (x *UnsubscribeResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeResult.ProtoReflect.Descriptor instead.
func (*UnsubscribeResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{24}
}

type PublishRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Data          Raw                    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Meta          Raw                    `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_client_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{25}
}

func (x *PublishRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PublishRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublishRequest) GetMeta() []byte {
	if x != nil {
		return x.Meta
	}
	return nil
}

type PublishResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResult) Reset() {
	*x = PublishResult{}
	mi := &file_client_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResult) ProtoMessage() {}

func (x *PublishResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResult.ProtoReflect.Descriptor instead.
func (*PublishResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{26}
}

type PresenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceRequest) Reset() {
	*x = PresenceRequest{}
	mi := &file_client_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceRequest) ProtoMessage() {}

func (x *PresenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceRequest.ProtoReflect.Descriptor instead.
func (*PresenceRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{27}
}

func (x *PresenceRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type PresenceResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Presence      map[string]*ClientInfo `protobuf:"bytes,1,rep,name=presence,proto3" json:"presence" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceResult) Reset() {
	*x = PresenceResult{}
	mi := &file_client_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceResult) ProtoMessage() {}

func (x *PresenceResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceResult.ProtoReflect.Descriptor instead.
func (*PresenceResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{28}
}

func (x *PresenceResult) GetPresence() map[string]*ClientInfo {
	if x != nil {
		return x.Presence
	}
	return nil
}

type PresenceStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceStatsRequest) Reset() {
	*x = PresenceStatsRequest{}
	mi := &file_client_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceStatsRequest) ProtoMessage() {}

func (x *PresenceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceStatsRequest.ProtoReflect.Descriptor instead.
func (*PresenceStatsRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{29}
}

func (x *PresenceStatsRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type PresenceStatsResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumClients    uint32                 `protobuf:"varint,1,opt,name=num_clients,json=numClients,proto3" json:"num_clients"`
	NumUsers      uint32                 `protobuf:"varint,2,opt,name=num_users,json=numUsers,proto3" json:"num_users"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceStatsResult) Reset() {
	*x = PresenceStatsResult{}
	mi := &file_client_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceStatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceStatsResult) ProtoMessage() {}

func (x *PresenceStatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceStatsResult.ProtoReflect.Descriptor instead.
func (*PresenceStatsResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{30}
}

func (x *PresenceStatsResult) GetNumClients() uint32 {
	if x != nil {
		return x.NumClients
	}
	return 0
}

func (x *PresenceStatsResult) GetNumUsers() uint32 {
	if x != nil {
		return x.NumUsers
	}
	return 0
}

type StreamPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        uint64                 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Epoch         string                 `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPosition) Reset() {
	*x = StreamPosition{}
	mi := &file_client_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPosition) ProtoMessage() {}

func (x *StreamPosition) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPosition.ProtoReflect.Descriptor instead.
func (*StreamPosition) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{31}
}

func (x *StreamPosition) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamPosition) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

type HistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Since         *StreamPosition        `protobuf:"bytes,8,opt,name=since,proto3" json:"since,omitempty"`
	Reverse       bool                   `protobuf:"varint,9,opt,name=reverse,proto3" json:"reverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	mi := &file_client_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{32}
}

func (x *HistoryRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *HistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HistoryRequest) GetSince() *StreamPosition {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *HistoryRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type HistoryResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Publications  []*Publication         `protobuf:"bytes,1,rep,name=publications,proto3" json:"publications"`
	Epoch         string                 `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch"`
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryResult) Reset() {
	*x = HistoryResult{}
	mi := &file_client_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryResult) ProtoMessage() {}

func (x *HistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryResult.ProtoReflect.Descriptor instead.
func (*HistoryResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{33}
}

func (x *HistoryResult) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *HistoryResult) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *HistoryResult) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_client_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{34}
}

type PingResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResult) Reset() {
	*x = PingResult{}
	mi := &file_client_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResult) ProtoMessage() {}

func (x *PingResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResult.ProtoReflect.Descriptor instead.
func (*PingResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{35}
}

type RPCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          Raw                    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCRequest) Reset() {
	*x = RPCRequest{}
	mi := &file_client_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCRequest) ProtoMessage() {}

func (x *RPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCRequest.ProtoReflect.Descriptor instead.
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{36}
}

func (x *RPCRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RPCRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type RPCResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          Raw                    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCResult) Reset() {
	*x = RPCResult{}
	mi := &file_client_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCResult) ProtoMessage() {}

func (x *RPCResult) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCResult.ProtoReflect.Descriptor instead.
func (*RPCResult) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{37}
}

func (x *RPCResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SendRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          Raw                    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	mi := &file_client_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{38}
}

func (x *SendRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_client_proto protoreflect.FileDescriptor

const file_client_proto_rawDesc = "" +
	"\n" +
	"\fclient.proto\x12\x1fcentrifugal.centrifuge.protocol\"S\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\ttemporary\x18\x03 \x01(\bR\ttemporary\"T\n" +
	"\x10EmulationRequest\x12\x12\n" +
	"\x04node\x18\x01 \x01(\tR\x04node\x12\x18\n" +
	"\asession\x18\x02 \x01(\tR\asession\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"\xbd\a\n" +
	"\aCommand\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12I\n" +
	"\aconnect\x18\x04 \x01(\v2/.centrifugal.centrifuge.protocol.ConnectRequestR\aconnect\x12O\n" +
	"\tsubscribe\x18\x05 \x01(\v21.centrifugal.centrifuge.protocol.SubscribeRequestR\tsubscribe\x12U\n" +
	"\vunsubscribe\x18\x06 \x01(\v23.centrifugal.centrifuge.protocol.UnsubscribeRequestR\vunsubscribe\x12I\n" +
	"\apublish\x18\a \x01(\v2/.centrifugal.centrifuge.protocol.PublishRequestR\apublish\x12L\n" +
	"\bpresence\x18\b \x01(\v20.centrifugal.centrifuge.protocol.PresenceRequestR\bpresence\x12\\\n" +
	"\x0epresence_stats\x18\t \x01(\v25.centrifugal.centrifuge.protocol.PresenceStatsRequestR\rpresenceStats\x12I\n" +
	"\ahistory\x18\n" +
	" \x01(\v2/.centrifugal.centrifuge.protocol.HistoryRequestR\ahistory\x12@\n" +
	"\x04ping\x18\v \x01(\v2,.centrifugal.centrifuge.protocol.PingRequestR\x04ping\x12@\n" +
	"\x04send\x18\f \x01(\v2,.centrifugal.centrifuge.protocol.SendRequestR\x04send\x12=\n" +
	"\x03rpc\x18\r \x01(\v2+.centrifugal.centrifuge.protocol.RPCRequestR\x03rpc\x12I\n" +
	"\arefresh\x18\x0e \x01(\v2/.centrifugal.centrifuge.protocol.RefreshRequestR\arefresh\x12S\n" +
	"\vsub_refresh\x18\x0f \x01(\v22.centrifugal.centrifuge.protocol.SubRefreshRequestR\n" +
	"subRefreshJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"\xe1\a\n" +
	"\x05Reply\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12<\n" +
	"\x05error\x18\x02 \x01(\v2&.centrifugal.centrifuge.protocol.ErrorR\x05error\x129\n" +
	"\x04push\x18\x04 \x01(\v2%.centrifugal.centrifuge.protocol.PushR\x04push\x12H\n" +
	"\aconnect\x18\x05 \x01(\v2..centrifugal.centrifuge.protocol.ConnectResultR\aconnect\x12N\n" +
	"\tsubscribe\x18\x06 \x01(\v20.centrifugal.centrifuge.protocol.SubscribeResultR\tsubscribe\x12T\n" +
	"\vunsubscribe\x18\a \x01(\v22.centrifugal.centrifuge.protocol.UnsubscribeResultR\vunsubscribe\x12H\n" +
	"\apublish\x18\b \x01(\v2..centrifugal.centrifuge.protocol.PublishResultR\apublish\x12K\n" +
	"\bpresence\x18\t \x01(\v2/.centrifugal.centrifuge.protocol.PresenceResultR\bpresence\x12[\n" +
	"\x0epresence_stats\x18\n" +
	" \x01(\v24.centrifugal.centrifuge.protocol.PresenceStatsResultR\rpresenceStats\x12H\n" +
	"\ahistory\x18\v \x01(\v2..centrifugal.centrifuge.protocol.HistoryResultR\ahistory\x12?\n" +
	"\x04ping\x18\f \x01(\v2+.centrifugal.centrifuge.protocol.PingResultR\x04ping\x12<\n" +
	"\x03rpc\x18\r \x01(\v2*.centrifugal.centrifuge.protocol.RPCResultR\x03rpc\x12H\n" +
	"\arefresh\x18\x0e \x01(\v2..centrifugal.centrifuge.protocol.RefreshResultR\arefresh\x12R\n" +
	"\vsub_refresh\x18\x0f \x01(\v21.centrifugal.centrifuge.protocol.SubRefreshResultR\n" +
	"subRefreshJ\x04\b\x03\x10\x04\"\x98\x05\n" +
	"\x04Push\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12>\n" +
	"\x03pub\x18\x04 \x01(\v2,.centrifugal.centrifuge.protocol.PublicationR\x03pub\x129\n" +
	"\x04join\x18\x05 \x01(\v2%.centrifugal.centrifuge.protocol.JoinR\x04join\x12<\n" +
	"\x05leave\x18\x06 \x01(\v2&.centrifugal.centrifuge.protocol.LeaveR\x05leave\x12N\n" +
	"\vunsubscribe\x18\a \x01(\v2,.centrifugal.centrifuge.protocol.UnsubscribeR\vunsubscribe\x12B\n" +
	"\amessage\x18\b \x01(\v2(.centrifugal.centrifuge.protocol.MessageR\amessage\x12H\n" +
	"\tsubscribe\x18\t \x01(\v2*.centrifugal.centrifuge.protocol.SubscribeR\tsubscribe\x12B\n" +
	"\aconnect\x18\n" +
	" \x01(\v2(.centrifugal.centrifuge.protocol.ConnectR\aconnect\x12K\n" +
	"\n" +
	"disconnect\x18\v \x01(\v2+.centrifugal.centrifuge.protocol.DisconnectR\n" +
	"disconnect\x12B\n" +
	"\arefresh\x18\f \x01(\v2(.centrifugal.centrifuge.protocol.RefreshR\arefreshJ\x04\b\x01\x10\x02J\x04\b\x03\x10\x04\"r\n" +
	"\n" +
	"ClientInfo\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12\x16\n" +
	"\x06client\x18\x02 \x01(\tR\x06client\x12\x1b\n" +
	"\tconn_info\x18\x03 \x01(\fR\bconnInfo\x12\x1b\n" +
	"\tchan_info\x18\x04 \x01(\fR\bchanInfo\"\xe9\x02\n" +
	"\vPublication\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x12\n" +
	"\x04meta\x18\v \x01(\fR\x04meta\x12?\n" +
	"\x04info\x18\x05 \x01(\v2+.centrifugal.centrifuge.protocol.ClientInfoR\x04info\x12\x16\n" +
	"\x06offset\x18\x06 \x01(\x04R\x06offset\x12J\n" +
	"\x04tags\x18\a \x03(\v26.centrifugal.centrifuge.protocol.Publication.TagsEntryR\x04tags\x12\x14\n" +
	"\x05delta\x18\b \x01(\bR\x05delta\x12\x12\n" +
	"\x04time\x18\t \x01(\x03R\x04time\x12\x18\n" +
	"\achannel\x18\n" +
	" \x01(\tR\achannel\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x01\x10\x02J\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"G\n" +
	"\x04Join\x12?\n" +
	"\x04info\x18\x01 \x01(\v2+.centrifugal.centrifuge.protocol.ClientInfoR\x04info\"H\n" +
	"\x05Leave\x12?\n" +
	"\x04info\x18\x01 \x01(\v2+.centrifugal.centrifuge.protocol.ClientInfoR\x04info\"?\n" +
	"\vUnsubscribe\x12\x12\n" +
	"\x04code\x18\x02 \x01(\rR\x04code\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reasonJ\x04\b\x01\x10\x02\"\x9b\x01\n" +
	"\tSubscribe\x12 \n" +
	"\vrecoverable\x18\x01 \x01(\bR\vrecoverable\x12\x14\n" +
	"\x05epoch\x18\x04 \x01(\tR\x05epoch\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x04R\x06offset\x12\x1e\n" +
	"\n" +
	"positioned\x18\x06 \x01(\bR\n" +
	"positioned\x12\x12\n" +
	"\x04data\x18\a \x01(\fR\x04dataJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"\x1d\n" +
	"\aMessage\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\x98\x03\n" +
	"\aConnect\x12\x16\n" +
	"\x06client\x18\x01 \x01(\tR\x06client\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12F\n" +
	"\x04subs\x18\x04 \x03(\v22.centrifugal.centrifuge.protocol.Connect.SubsEntryR\x04subs\x12\x18\n" +
	"\aexpires\x18\x05 \x01(\bR\aexpires\x12\x10\n" +
	"\x03ttl\x18\x06 \x01(\rR\x03ttl\x12\x12\n" +
	"\x04ping\x18\a \x01(\rR\x04ping\x12\x12\n" +
	"\x04pong\x18\b \x01(\bR\x04pong\x12\x18\n" +
	"\asession\x18\t \x01(\tR\asession\x12\x12\n" +
	"\x04node\x18\n" +
	" \x01(\tR\x04node\x12\x12\n" +
	"\x04time\x18\v \x01(\x03R\x04time\x1ai\n" +
	"\tSubsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12F\n" +
	"\x05value\x18\x02 \x01(\v20.centrifugal.centrifuge.protocol.SubscribeResultR\x05value:\x028\x01\"V\n" +
	"\n" +
	"Disconnect\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12\x1c\n" +
	"\treconnect\x18\x03 \x01(\bR\treconnect\"5\n" +
	"\aRefresh\x12\x18\n" +
	"\aexpires\x18\x01 \x01(\bR\aexpires\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\rR\x03ttl\"\xb7\x03\n" +
	"\x0eConnectRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12M\n" +
	"\x04subs\x18\x03 \x03(\v29.centrifugal.centrifuge.protocol.ConnectRequest.SubsEntryR\x04subs\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12V\n" +
	"\aheaders\x18\x06 \x03(\v2<.centrifugal.centrifuge.protocol.ConnectRequest.HeadersEntryR\aheaders\x1aj\n" +
	"\tSubsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12G\n" +
	"\x05value\x18\x02 \x01(\v21.centrifugal.centrifuge.protocol.SubscribeRequestR\x05value:\x028\x01\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa4\x03\n" +
	"\rConnectResult\x12\x16\n" +
	"\x06client\x18\x01 \x01(\tR\x06client\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x18\n" +
	"\aexpires\x18\x03 \x01(\bR\aexpires\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\rR\x03ttl\x12\x12\n" +
	"\x04data\x18\x05 \x01(\fR\x04data\x12L\n" +
	"\x04subs\x18\x06 \x03(\v28.centrifugal.centrifuge.protocol.ConnectResult.SubsEntryR\x04subs\x12\x12\n" +
	"\x04ping\x18\a \x01(\rR\x04ping\x12\x12\n" +
	"\x04pong\x18\b \x01(\bR\x04pong\x12\x18\n" +
	"\asession\x18\t \x01(\tR\asession\x12\x12\n" +
	"\x04node\x18\n" +
	" \x01(\tR\x04node\x12\x12\n" +
	"\x04time\x18\v \x01(\x03R\x04time\x1ai\n" +
	"\tSubsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12F\n" +
	"\x05value\x18\x02 \x01(\v20.centrifugal.centrifuge.protocol.SubscribeResultR\x05value:\x028\x01\"&\n" +
	"\x0eRefreshRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"m\n" +
	"\rRefreshResult\x12\x16\n" +
	"\x06client\x18\x01 \x01(\tR\x06client\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x18\n" +
	"\aexpires\x18\x03 \x01(\bR\aexpires\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\rR\x03ttl\"\xa1\x02\n" +
	"\x10SubscribeRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x18\n" +
	"\arecover\x18\x03 \x01(\bR\arecover\x12\x14\n" +
	"\x05epoch\x18\x06 \x01(\tR\x05epoch\x12\x16\n" +
	"\x06offset\x18\a \x01(\x04R\x06offset\x12\x12\n" +
	"\x04data\x18\b \x01(\fR\x04data\x12\x1e\n" +
	"\n" +
	"positioned\x18\t \x01(\bR\n" +
	"positioned\x12 \n" +
	"\vrecoverable\x18\n" +
	" \x01(\bR\vrecoverable\x12\x1d\n" +
	"\n" +
	"join_leave\x18\v \x01(\bR\tjoinLeave\x12\x14\n" +
	"\x05delta\x18\f \x01(\tR\x05deltaJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06\"\xfa\x02\n" +
	"\x0fSubscribeResult\x12\x18\n" +
	"\aexpires\x18\x01 \x01(\bR\aexpires\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\rR\x03ttl\x12 \n" +
	"\vrecoverable\x18\x03 \x01(\bR\vrecoverable\x12\x14\n" +
	"\x05epoch\x18\x06 \x01(\tR\x05epoch\x12P\n" +
	"\fpublications\x18\a \x03(\v2,.centrifugal.centrifuge.protocol.PublicationR\fpublications\x12\x1c\n" +
	"\trecovered\x18\b \x01(\bR\trecovered\x12\x16\n" +
	"\x06offset\x18\t \x01(\x04R\x06offset\x12\x1e\n" +
	"\n" +
	"positioned\x18\n" +
	" \x01(\bR\n" +
	"positioned\x12\x12\n" +
	"\x04data\x18\v \x01(\fR\x04data\x12%\n" +
	"\x0ewas_recovering\x18\f \x01(\bR\rwasRecovering\x12\x14\n" +
	"\x05delta\x18\r \x01(\bR\x05deltaJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06\"C\n" +
	"\x11SubRefreshRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\">\n" +
	"\x10SubRefreshResult\x12\x18\n" +
	"\aexpires\x18\x01 \x01(\bR\aexpires\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\rR\x03ttl\".\n" +
	"\x12UnsubscribeRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\"\x13\n" +
	"\x11UnsubscribeResult\"R\n" +
	"\x0ePublishRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x12\n" +
	"\x04meta\x18\x03 \x01(\fR\x04meta\"\x0f\n" +
	"\rPublishResult\"+\n" +
	"\x0fPresenceRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\"\xd5\x01\n" +
	"\x0ePresenceResult\x12Y\n" +
	"\bpresence\x18\x01 \x03(\v2=.centrifugal.centrifuge.protocol.PresenceResult.PresenceEntryR\bpresence\x1ah\n" +
	"\rPresenceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12A\n" +
	"\x05value\x18\x02 \x01(\v2+.centrifugal.centrifuge.protocol.ClientInfoR\x05value:\x028\x01\"0\n" +
	"\x14PresenceStatsRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\"S\n" +
	"\x13PresenceStatsResult\x12\x1f\n" +
	"\vnum_clients\x18\x01 \x01(\rR\n" +
	"numClients\x12\x1b\n" +
	"\tnum_users\x18\x02 \x01(\rR\bnumUsers\">\n" +
	"\x0eStreamPosition\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05epoch\x18\x02 \x01(\tR\x05epoch\"\xbf\x01\n" +
	"\x0eHistoryRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x14\n" +
	"\x05limit\x18\a \x01(\x05R\x05limit\x12E\n" +
	"\x05since\x18\b \x01(\v2/.centrifugal.centrifuge.protocol.StreamPositionR\x05since\x12\x18\n" +
	"\areverse\x18\t \x01(\bR\areverseJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04J\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\x06\x10\a\"\x8f\x01\n" +
	"\rHistoryResult\x12P\n" +
	"\fpublications\x18\x01 \x03(\v2,.centrifugal.centrifuge.protocol.PublicationR\fpublications\x12\x14\n" +
	"\x05epoch\x18\x02 \x01(\tR\x05epoch\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\"\r\n" +
	"\vPingRequest\"\f\n" +
	"\n" +
	"PingResult\"8\n" +
	"\n" +
	"RPCRequest\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\"\x1f\n" +
	"\tRPCResult\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"!\n" +
	"\vSendRequest\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04dataB!Z\x1fgithub.com/centrifugal/protocolb\x06proto3"

var (
	file_client_proto_rawDescOnce sync.Once
	file_client_proto_rawDescData []byte
)

func file_client_proto_rawDescGZIP() []byte {
	file_client_proto_rawDescOnce.Do(func() {
		file_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_proto_rawDesc), len(file_client_proto_rawDesc)))
	})
	return file_client_proto_rawDescData
}

var file_client_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_client_proto_goTypes = []any{
	(*Error)(nil),                // 0: centrifugal.centrifuge.protocol.Error
	(*EmulationRequest)(nil),     // 1: centrifugal.centrifuge.protocol.EmulationRequest
	(*Command)(nil),              // 2: centrifugal.centrifuge.protocol.Command
	(*Reply)(nil),                // 3: centrifugal.centrifuge.protocol.Reply
	(*Push)(nil),                 // 4: centrifugal.centrifuge.protocol.Push
	(*ClientInfo)(nil),           // 5: centrifugal.centrifuge.protocol.ClientInfo
	(*Publication)(nil),          // 6: centrifugal.centrifuge.protocol.Publication
	(*Join)(nil),                 // 7: centrifugal.centrifuge.protocol.Join
	(*Leave)(nil),                // 8: centrifugal.centrifuge.protocol.Leave
	(*Unsubscribe)(nil),          // 9: centrifugal.centrifuge.protocol.Unsubscribe
	(*Subscribe)(nil),            // 10: centrifugal.centrifuge.protocol.Subscribe
	(*Message)(nil),              // 11: centrifugal.centrifuge.protocol.Message
	(*Connect)(nil),              // 12: centrifugal.centrifuge.protocol.Connect
	(*Disconnect)(nil),           // 13: centrifugal.centrifuge.protocol.Disconnect
	(*Refresh)(nil),              // 14: centrifugal.centrifuge.protocol.Refresh
	(*ConnectRequest)(nil),       // 15: centrifugal.centrifuge.protocol.ConnectRequest
	(*ConnectResult)(nil),        // 16: centrifugal.centrifuge.protocol.ConnectResult
	(*RefreshRequest)(nil),       // 17: centrifugal.centrifuge.protocol.RefreshRequest
	(*RefreshResult)(nil),        // 18: centrifugal.centrifuge.protocol.RefreshResult
	(*SubscribeRequest)(nil),     // 19: centrifugal.centrifuge.protocol.SubscribeRequest
	(*SubscribeResult)(nil),      // 20: centrifugal.centrifuge.protocol.SubscribeResult
	(*SubRefreshRequest)(nil),    // 21: centrifugal.centrifuge.protocol.SubRefreshRequest
	(*SubRefreshResult)(nil),     // 22: centrifugal.centrifuge.protocol.SubRefreshResult
	(*UnsubscribeRequest)(nil),   // 23: centrifugal.centrifuge.protocol.UnsubscribeRequest
	(*UnsubscribeResult)(nil),    // 24: centrifugal.centrifuge.protocol.UnsubscribeResult
	(*PublishRequest)(nil),       // 25: centrifugal.centrifuge.protocol.PublishRequest
	(*PublishResult)(nil),        // 26: centrifugal.centrifuge.protocol.PublishResult
	(*PresenceRequest)(nil),      // 27: centrifugal.centrifuge.protocol.PresenceRequest
	(*PresenceResult)(nil),       // 28: centrifugal.centrifuge.protocol.PresenceResult
	(*PresenceStatsRequest)(nil), // 29: centrifugal.centrifuge.protocol.PresenceStatsRequest
	(*PresenceStatsResult)(nil),  // 30: centrifugal.centrifuge.protocol.PresenceStatsResult
	(*StreamPosition)(nil),       // 31: centrifugal.centrifuge.protocol.StreamPosition
	(*HistoryRequest)(nil),       // 32: centrifugal.centrifuge.protocol.HistoryRequest
	(*HistoryResult)(nil),        // 33: centrifugal.centrifuge.protocol.HistoryResult
	(*PingRequest)(nil),          // 34: centrifugal.centrifuge.protocol.PingRequest
	(*PingResult)(nil),           // 35: centrifugal.centrifuge.protocol.PingResult
	(*RPCRequest)(nil),           // 36: centrifugal.centrifuge.protocol.RPCRequest
	(*RPCResult)(nil),            // 37: centrifugal.centrifuge.protocol.RPCResult
	(*SendRequest)(nil),          // 38: centrifugal.centrifuge.protocol.SendRequest
	nil,                          // 39: centrifugal.centrifuge.protocol.Publication.TagsEntry
	nil,                          // 40: centrifugal.centrifuge.protocol.Connect.SubsEntry
	nil,                          // 41: centrifugal.centrifuge.protocol.ConnectRequest.SubsEntry
	nil,                          // 42: centrifugal.centrifuge.protocol.ConnectRequest.HeadersEntry
	nil,                          // 43: centrifugal.centrifuge.protocol.ConnectResult.SubsEntry
	nil,                          // 44: centrifugal.centrifuge.protocol.PresenceResult.PresenceEntry
}
var file_client_proto_depIdxs = []int32{
	15, // 0: centrifugal.centrifuge.protocol.Command.connect:type_name -> centrifugal.centrifuge.protocol.ConnectRequest
	19, // 1: centrifugal.centrifuge.protocol.Command.subscribe:type_name -> centrifugal.centrifuge.protocol.SubscribeRequest
	23, // 2: centrifugal.centrifuge.protocol.Command.unsubscribe:type_name -> centrifugal.centrifuge.protocol.UnsubscribeRequest
	25, // 3: centrifugal.centrifuge.protocol.Command.publish:type_name -> centrifugal.centrifuge.protocol.PublishRequest
	27, // 4: centrifugal.centrifuge.protocol.Command.presence:type_name -> centrifugal.centrifuge.protocol.PresenceRequest
	29, // 5: centrifugal.centrifuge.protocol.Command.presence_stats:type_name -> centrifugal.centrifuge.protocol.PresenceStatsRequest
	32, // 6: centrifugal.centrifuge.protocol.Command.history:type_name -> centrifugal.centrifuge.protocol.HistoryRequest
	34, // 7: centrifugal.centrifuge.protocol.Command.ping:type_name -> centrifugal.centrifuge.protocol.PingRequest
	38, // 8: centrifugal.centrifuge.protocol.Command.send:type_name -> centrifugal.centrifuge.protocol.SendRequest
	36, // 9: centrifugal.centrifuge.protocol.Command.rpc:type_name -> centrifugal.centrifuge.protocol.RPCRequest
	17, // 10: centrifugal.centrifuge.protocol.Command.refresh:type_name -> centrifugal.centrifuge.protocol.RefreshRequest
	21, // 11: centrifugal.centrifuge.protocol.Command.sub_refresh:type_name -> centrifugal.centrifuge.protocol.SubRefreshRequest
	0,  // 12: centrifugal.centrifuge.protocol.Reply.error:type_name -> centrifugal.centrifuge.protocol.Error
	4,  // 13: centrifugal.centrifuge.protocol.Reply.push:type_name -> centrifugal.centrifuge.protocol.Push
	16, // 14: centrifugal.centrifuge.protocol.Reply.connect:type_name -> centrifugal.centrifuge.protocol.ConnectResult
	20, // 15: centrifugal.centrifuge.protocol.Reply.subscribe:type_name -> centrifugal.centrifuge.protocol.SubscribeResult
	24, // 16: centrifugal.centrifuge.protocol.Reply.unsubscribe:type_name -> centrifugal.centrifuge.protocol.UnsubscribeResult
	26, // 17: centrifugal.centrifuge.protocol.Reply.publish:type_name -> centrifugal.centrifuge.protocol.PublishResult
	28, // 18: centrifugal.centrifuge.protocol.Reply.presence:type_name -> centrifugal.centrifuge.protocol.PresenceResult
	30, // 19: centrifugal.centrifuge.protocol.Reply.presence_stats:type_name -> centrifugal.centrifuge.protocol.PresenceStatsResult
	33, // 20: centrifugal.centrifuge.protocol.Reply.history:type_name -> centrifugal.centrifuge.protocol.HistoryResult
	35, // 21: centrifugal.centrifuge.protocol.Reply.ping:type_name -> centrifugal.centrifuge.protocol.PingResult
	37, // 22: centrifugal.centrifuge.protocol.Reply.rpc:type_name -> centrifugal.centrifuge.protocol.RPCResult
	18, // 23: centrifugal.centrifuge.protocol.Reply.refresh:type_name -> centrifugal.centrifuge.protocol.RefreshResult
	22, // 24: centrifugal.centrifuge.protocol.Reply.sub_refresh:type_name -> centrifugal.centrifuge.protocol.SubRefreshResult
	6,  // 25: centrifugal.centrifuge.protocol.Push.pub:type_name -> centrifugal.centrifuge.protocol.Publication
	7,  // 26: centrifugal.centrifuge.protocol.Push.join:type_name -> centrifugal.centrifuge.protocol.Join
	8,  // 27: centrifugal.centrifuge.protocol.Push.leave:type_name -> centrifugal.centrifuge.protocol.Leave
	9,  // 28: centrifugal.centrifuge.protocol.Push.unsubscribe:type_name -> centrifugal.centrifuge.protocol.Unsubscribe
	11, // 29: centrifugal.centrifuge.protocol.Push.message:type_name -> centrifugal.centrifuge.protocol.Message
	10, // 30: centrifugal.centrifuge.protocol.Push.subscribe:type_name -> centrifugal.centrifuge.protocol.Subscribe
	12, // 31: centrifugal.centrifuge.protocol.Push.connect:type_name -> centrifugal.centrifuge.protocol.Connect
	13, // 32: centrifugal.centrifuge.protocol.Push.disconnect:type_name -> centrifugal.centrifuge.protocol.Disconnect
	14, // 33: centrifugal.centrifuge.protocol.Push.refresh:type_name -> centrifugal.centrifuge.protocol.Refresh
	5,  // 34: centrifugal.centrifuge.protocol.Publication.info:type_name -> centrifugal.centrifuge.protocol.ClientInfo
	39, // 35: centrifugal.centrifuge.protocol.Publication.tags:type_name -> centrifugal.centrifuge.protocol.Publication.TagsEntry
	5,  // 36: centrifugal.centrifuge.protocol.Join.info:type_name -> centrifugal.centrifuge.protocol.ClientInfo
	5,  // 37: centrifugal.centrifuge.protocol.Leave.info:type_name -> centrifugal.centrifuge.protocol.ClientInfo
	40, // 38: centrifugal.centrifuge.protocol.Connect.subs:type_name -> centrifugal.centrifuge.protocol.Connect.SubsEntry
	41, // 39: centrifugal.centrifuge.protocol.ConnectRequest.subs:type_name -> centrifugal.centrifuge.protocol.ConnectRequest.SubsEntry
	42, // 40: centrifugal.centrifuge.protocol.ConnectRequest.headers:type_name -> centrifugal.centrifuge.protocol.ConnectRequest.HeadersEntry
	43, // 41: centrifugal.centrifuge.protocol.ConnectResult.subs:type_name -> centrifugal.centrifuge.protocol.ConnectResult.SubsEntry
	6,  // 42: centrifugal.centrifuge.protocol.SubscribeResult.publications:type_name -> centrifugal.centrifuge.protocol.Publication
	44, // 43: centrifugal.centrifuge.protocol.PresenceResult.presence:type_name -> centrifugal.centrifuge.protocol.PresenceResult.PresenceEntry
	31, // 44: centrifugal.centrifuge.protocol.HistoryRequest.since:type_name -> centrifugal.centrifuge.protocol.StreamPosition
	6,  // 45: centrifugal.centrifuge.protocol.HistoryResult.publications:type_name -> centrifugal.centrifuge.protocol.Publication
	20, // 46: centrifugal.centrifuge.protocol.Connect.SubsEntry.value:type_name -> centrifugal.centrifuge.protocol.SubscribeResult
	19, // 47: centrifugal.centrifuge.protocol.ConnectRequest.SubsEntry.value:type_name -> centrifugal.centrifuge.protocol.SubscribeRequest
	20, // 48: centrifugal.centrifuge.protocol.ConnectResult.SubsEntry.value:type_name -> centrifugal.centrifuge.protocol.SubscribeResult
	5,  // 49: centrifugal.centrifuge.protocol.PresenceResult.PresenceEntry.value:type_name -> centrifugal.centrifuge.protocol.ClientInfo
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_client_proto_init() }
func file_client_proto_init() {
	if File_client_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_proto_rawDesc), len(file_client_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_proto_goTypes,
		DependencyIndexes: file_client_proto_depIdxs,
		MessageInfos:      file_client_proto_msgTypes,
	}.Build()
	File_client_proto = out.File
	file_client_proto_goTypes = nil
	file_client_proto_depIdxs = nil
}
